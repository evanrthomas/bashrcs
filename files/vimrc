"vim plugin manager
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
Plugin 'tpope/vim-fugitive'
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" helps open files, similar to command p in sublime
Plugin 'git://git.wincent.com/command-t.git'

" good autocomplete
" Plugin 'Valloric/YouCompleteMe'
" better sytanx highlint
Plugin 'scrooloose/syntastic'
" cool command prompt
Plugin 'bling/vim-airline'
set laststatus=2
let g:airline_powerline_fonts =1
set encoding=utf-8

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" Git wrapper
" Plugin 'tpope/vim-fugitive'
"

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" set leader key to space -> easiest key to hit!
let mapleader=" " 

"escape from any setting
imap <C-p> <Esc>
vmap <C-p> <Esc>

"disable autocomplete which is mapped to contorl p
let g:acp_enableStartup = 0

" get shift tab to map to S-tab
map <Esc>[Z <S-tab>
ounmap <Esc>[Z

"quick escape 
"imap jk <Esc>

" quick save and quit in insert mode
"imap ZZ <Esc>:wq<CR>

"save and run current file as python script
"nmap <Leader>rp :w<CR>:!python %<CR>

"if number of buffers = 1 quit vim, else unload buffer
function! Quit()
  if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    q
  else
    bd
  endif
endfunction

"quick: save, close, reload
nmap <Leader>w :w<CR>
nmap <Leader>q :call Quit()<CR>
nmap <Leader>r :e<CR>
"nmap <Leader>W :w!<CR>


" all commands 
nmap <Leader>aw :wa<CR>
nmap <Leader>aq :qa<CR>
nmap <Leader>ar :windo e<CR>

"save the next acions in the clipboard regiter, capitol allows you to append
" currently not working
nmap <Leader>c "p
nmap <Leader>C "P

"remap Shift h,j,k,l to smart things 
noremap H ^
noremap L $
noremap J <C-D>
noremap K <C-U>


" delete the buffer
"nmap <Leader>q :bd<CR>

" toggle numbers and paste mode
nmap <Leader>n :set number!<CR>
nmap <Leader>p :set paste!<CR>

"correct Y behavior (yank to EOL like C or D)
nmap Y y$

" is smart with word that wrap around
nnoremap j gj
nnoremap k gk

"clear search hilight
nmap <silent> <Leader>/ :nohlsearch<CR>

"tabbing in visual mode
vnoremap < <gv
vnoremap > >gv

"fast scroll
"nnoremap <C-y> 3<C-y>
"nnoremap <C-e> 3<C-e>

"browse buffers
nmap <Leader>b :ls<CR>:b 

"folding I like
nmap zl zo 
nmap zh zc

nmap zL zO
nmap zH zC
"fold and all fold all folds
"its caps becauze zj and zk jumps between folds
nmap zK zM
nmap zJ zR
"everything starts unfolded
au BufWinEnter * normal zR

" tab navigation like firefox
:nmap <s-tab> :tabprevious<CR>
:nmap <tab> :tabnext<CR>
:nmap <C-t> :tabnew<CR>


" change windows
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

" new frame from window
nmap <C-w>h :topleft  vnew<CR>
nmap <C-w>l :botright vnew<CR>
nmap <C-w>k :topleft  new<CR>
nmap <C-w>j :botright new<CR>

" new frame from frame
nmap <C-f>h :leftabove  vnew<CR>
nmap <C-f>l :rightbelow vnew<CR>
nmap <C-f>k :leftabove  new<CR>
nmap <C-f>j :rightbelow new<CR>

" netrw
nmap <Leader>o :e.<CR>
nmap <Leader>O :E.<CR>
" case insensitive
let g:netrw_sort_options = "i"
"change sorting sequence 
" newrw_sort_sequence = 

" general
set hidden
set history=1000
set virtualedit=onemore
set nospell

" ui
set background=dark
" colorscheme wombat256mod
colorscheme grb
set guifont=Consolas:h9:cANSI
set showmode

set ruler
set number
set showmatch

" searching
set ignorecase
set smartcase
set incsearch
set hlsearch

" navigation
set whichwrap=b,s,h,l,<,>,[,]
set scrolljump=5
set scrolloff=3
set gdefault

" tab formatting
set shiftwidth=2
set smarttab
set softtabstop=2
set expandtab
set tabstop=2
set autoindent

" modify the word deliminiators
set iskeyword-=_

"iterm magic lets mouse and scroll work
set mouse=a

" syntax and folding
syntax enable
set pastetoggle=<F12>
"for python
"set foldmethod=syntax
set foldmethod=indent

" correctly interpret file types
au BufNewFile,BufRead *.pde set filetype=c
au BufNewFile,BufRead *.pic set filetype=ibasic
au BufNewFile,BufRead *.bas set filetype=ibasic

"change folding color 
hi Folded ctermbg=Black
