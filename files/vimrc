"When moving to a new vim
"Copy vimrc
"Install vundle https://github.com/gmarik/vundle#about
"run :BundleInstall Syntastic
"run :BundleInstall Valloric/YouCompleteMe (you may have to install vim from source to to get this working)
"compile you complete me
"remove dumb 80 character line limit from ~/.vim/bundle/YouCompleteMe/style_format.sh
"run :Bundleinstall terryma/vim-multiple-cursors
"download vim fanfingtastic and put in ~/.vim/plugins
"


" Things required for vundle
set nocompatible              " be iMproved, required
filetype off                  " required


set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/vundle'
Plugin 'Syntastic'
if v:version > 703
  Plugin 'Valloric/YouCompleteMe'
endif
Plugin 'ctrlp.vim'
Plugin 'fatih/vim-go'
call vundle#end()

filetype plugin indent on    " required

set noswapfile

let g:ctrlp_switch_buffer=1 "allow ctrlp to open the same file twice
let g:syntastic_java_javac_config_file_enabled=1
let g:syntastic_java_javac_classpath="./build/classes"

let g:go_doc_keywordprg_enabled=0

let mapleader=" "
nmap <Leader>p :set paste!<CR>
nmap <Leader>c :noh<CR>

set backspace=indent,eol,start
set foldmethod=indent
set foldlevel=99


" Change colorscheme from default to ron
colorscheme ron

" Turn on line numbering. Turn it on and of with set number and set number!
set nu
"set rnu

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk


" opposite of ctrl o
noremap <C-i> <C-I>

" Tab navigation like chrome
noremap <S-tab> gT
noremap <tab> gt
noremap <C-t> :tabnew<CR>

" Fast scrolling up and down
noremap J 4j
noremap K 4k

" beginning/end of line movement
noremap H ^
noremap L $

" make v exit visual mode even when in visual block and visual line mode
xnoremap v <esc>

" make o concatenate lines (just because I don't have a better letter for it)
xnoremap o J

" Set jk to be escape in insert mode
inoremap jk <esc>
inoremap jK <esc>
inoremap Jk <esc>
inoremap JK <esc>

" Set syntax on
syntax on

"delete without putting into buffer
map s "_

"Allow copy pasting from clipboard (doesn't work)
set clipboard=unnamedplus

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Remove trailing whitespace at the end of lines before every write.
"(This is particularly important in conjunciton with autocmpl plugin, because you're constantly pressing space at the end of every line
autocmd BufWritePre * :%s/\s\+$//e

noremap q %

noremap <Leader>q qj
"replay macro then go to next line, map tilda because you can press tilda
"multiple times
noremap <Leader>l ^@jj^
noremap ` ^@jj^
noremap <Leader>p @j
noremap <Leader>a :normal @j


" change windows
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

" new frame from window
" nmap <C-w>h :topleft  vnew<CR>
" nmap <C-w>l :botright vnew<CR>
" nmap <C-w>k :topleft  new<CR>
" nmap <C-w>j :botright new<CR>

" open current buffer in new window
nmap <C-w>h :exe 'topleft  vnew '.expand('%:p')<CR>
nmap <C-w>l :exe 'botright vnew '.expand('%:p')<CR>
nmap <C-w>k :exe 'topleft  new '.expand('%:p')<CR>
nmap <C-w>j :exe 'botright new '.expand('%:p')<CR>

" new frame from frame
" nmap <C-f>h :leftabove  vnew<CR>
" nmap <C-f>l :rightbelow vnew<CR>
" nmap <C-f>k :leftabove  new<CR>
" nmap <C-f>j :rightbelow new<CR>

" new frame from frame
nmap <C-f>h :exe 'leftabove  vnew '.expand('%p')<CR>
nmap <C-f>l :exe 'rightbelow vnew '.expand('%p')<CR>
nmap <C-f>k :exe 'leftabove  new '.expand('%p')<CR>
nmap <C-f>j :exe 'rightbelow new '.expand('%p')<CR>

" easy split resizing
nnoremap <silent> <C-Right> <C-w>>
nnoremap <silent> <C-Left> <C-w><lt>
nnoremap <silent> <C-Up> <C-w>+
nnoremap <silent> <C-Down> <C-w>-


" searching
set ignorecase
set smartcase
set incsearch
set hlsearch
set ic "ignore case
set hls "Higlhight search

" Wrap text instead of being on one line
"set lbr

"tabs
set expandtab "Use spaces instead of tabs
set smarttab "Be smart when using tabs ;)
" 1 tab == 2 spaces
set shiftwidth=2
set softtabstop=2
set ai "Auto indent (copy indent from current line onto next line)
set si "Smart indent (indent where the syntax would want an indent)
set wrap "Wrap lines
" Indent automatically depending on filetype
filetype indent on

autocmd BufRead,BufNewFile *go setlocal filetype=go


map <Leader>j :rightb vsp <CR>:exec("tag ".expand("<cword>"))<CR>
nmap <Leader>h :sp <CR>:exec("tag ".expand("<cword>"))<CR>
nmap <Leader>s :exec("ts ".expand("<cword>"))<CR>
nmap <Leader>] <C-]>

:set laststatus=2
:ca path echo expand('%:p')<CR>
nmap <C-w>e <C-w>T
nmap <C-w>t <C-w>T

:ca runpy !python '%:p'
:ca rungo !go run '%:p'
:ca genCtags !ctags `find .`<CR>
" Rename tabs to show tab number.
" (Copied from http://stackoverflow.com/questions/5927952/whats-implementation-of-vims-default-tabline-function)
if exists("+showtabline")
  function! MyTabLine()
    let s = ''
    let wn = ''
    let t = tabpagenr()
    let i = 1

    while i <= tabpagenr('$')
      let buflist = tabpagebuflist(i)
      let winnr = tabpagewinnr(i)
      let s .= '%' . i . 'T'
      let s .= (i == t ? '%1*' : '%2*')
      let s .= ' '
      let wn = tabpagewinnr(i,'$')

      let s .= '%#TabNum#'
      let s .= i
      " let s .= '%*'
      let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
      let bufnr = buflist[winnr - 1]
      let file = bufname(bufnr)
      let buftype = getbufvar(bufnr, 'buftype')
        if buftype == 'nofile'
          if file =~ '\/.'
            let file = substitute(file, '.*\/\ze.', '', '')
          endif
        else
          let file = fnamemodify(file, ':p:t')
        endif

      if file == ''
        let file = '[No Name]'
      endif

      let s .= ' ' . file . ' '
      let i = i + 1
    endwhile
    let s .= '%T%#TabLineFill#%='
    let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
    return s
  endfunction

  set stal=2
  set tabline=%!MyTabLine()
  set showtabline=1
  highlight link TabNum Special
endif

